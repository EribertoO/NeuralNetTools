% Generated by roxygen2 (4.0.2): do not edit by hand
\name{neuralweights}
\alias{neuralweights}
\alias{neuralweights.mlp}
\alias{neuralweights.nn}
\alias{neuralweights.nnet}
\alias{neuralweights.numeric}
\title{Get weights for a neural network}
\usage{
neuralweights(mod_in, ...)

\method{neuralweights}{numeric}(mod_in, rel_rsc = NULL, struct)

\method{neuralweights}{nnet}(mod_in, rel_rsc = NULL)

\method{neuralweights}{mlp}(mod_in, rel_rsc = NULL)

\method{neuralweights}{nn}(mod_in, rel_rsc = NULL)
}
\arguments{
\item{mod_in}{input object for which an organized model list is desired.  The input can be an object of class \code{numeric}, \code{nnet}, \code{mlp}, or \code{nn}}

\item{...}{arguments passed to other methods}

\item{rel_rsc}{numeric vector of length two indicating minimum and maximum values to rescale weights for plotting in a neural interpretation diagram.}

\item{struct}{numeric vector equal in length to the number of layers in the network.  Each number indicates the number of nodes in each layer starting with the input and ending with the output.  An arbitrary number of hidden layers can be included.}
}
\value{
Returns \code{list} of weight values for the input model.
}
\description{
Get weights for a neural network in an organized list by extracting values from a neural network object.  This function is generally not called by itself.
}
\details{
Each element of the returned list is named using the construct 'layer node', e.g. 'out 1' is the first node of the output layer.  Hidden layers are named using three values for instances with more than one hidden layer, e.g., 'hidden 1 1' is the first node in the first hidden layer, 'hidden 1 2' is the second node in the first hidden layer, 'hidden 2 1' is the first node in the second hidden layer, etc.  The values in each element of the list represent the weights entering the specific node from the preceding layer in sequential order, starting with the bias layer if applicable.
}
\examples{
## using documentation from the nnet package to create a model

library(nnet)

ird <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]), species = factor(c(rep("s",50), rep("c", 50), rep("v", 50))))

ir.nn2 <- nnet(species ~ ., data = ird, subset = samp, size = 2, rang = 0.1, decay = 5e-4, maxit = 200)

neuralweights(ir.nn2)
}

